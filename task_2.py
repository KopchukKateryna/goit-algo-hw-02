# –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —è–∫ –≤—Ö—ñ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä,
# –¥–æ–¥–∞—î –≤—Å—ñ –π–æ–≥–æ —Å–∏–º–≤–æ–ª–∏ –¥–æ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ—ó —á–µ—Ä–≥–∏ (deque –∑ –º–æ–¥—É–ª—è collections –≤ Python),
# –∞ –ø–æ—Ç—ñ–º –ø–æ—Ä—ñ–≤–Ω—é—î —Å–∏–º–≤–æ–ª–∏ –∑ –æ–±–æ—Ö –∫—ñ–Ω—Ü—ñ–≤ —á–µ—Ä–≥–∏, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
# –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —è–∫ —Ä—è–¥–∫–∏ –∑ –ø–∞—Ä–Ω–æ—é, —Ç–∞–∫ —ñ –∑ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
# —Å–∏–º–≤–æ–ª—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –±—É—Ç–∏ –Ω–µ—á—É—Ç–ª–∏–≤–æ—é –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤.

from collections import deque


def is_palindrome(input_string):
    normalized_string = "".join(input_string.lower().split())
    char_deque = deque(normalized_string)

    while len(char_deque) > 1:
        if char_deque.popleft() != char_deque.pop():
            return False

    return True


test_strings = [
    "—Ä–∞–¥–∞—Ä",  # –ü—Ä–æ—Å—Ç–∏–π –ø–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤.
    "—Ç–æ–ø–æ—Ç",  # –ü–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ –ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤.
    "–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞",  # –í—ñ–¥–æ–º–∏–π –ø–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ —Ç–∞ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–≥—ñ—Å—Ç—Ä–∞–º–∏.
    "–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è",  # –ü–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏.
    "–ü—Ä–∏–≤—ñ—Ç",  # –ù–µ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
    "–î–µ –ø–æ–º–∏—Ç–∏ –º–æ–ø–µ–¥",  # –ü–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ —Ç–∞ –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É.
    "–ú–∞–¥–∞–º",  # –ü–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ —Ä—ñ–∑–Ω–∏–º —Ä–µ–≥—ñ—Å—Ç—Ä–æ–º –ª—ñ—Ç–µ—Ä.
    "",  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, –∫—Ä–∞–π–æ–≤–∏–π –≤–∏–ø–∞–¥–æ–∫.
    " ",  # –†—è–¥–æ–∫ –∑ –æ–¥–Ω–∏–º –ø—Ä–æ–±—ñ–ª–æ–º.
    "12321",  # –ß–∏—Å–ª–æ–≤–∏–π –ø–∞–ª—ñ–Ω–¥—Ä–æ–º.
    "12345",  # –ß–∏—Å–ª–æ–≤–∏–π –Ω–µ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º.
    "üòäüòä",  # –ü–∞–ª—ñ–Ω–¥—Ä–æ–º –∑—ñ —Å–º–∞–π–ª–∏–∫–∞–º–∏.
    "üòä–∞–±–≤üòä",  # –ù–µ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º –∑—ñ —Å–º–∞–π–ª–∏–∫–∞–º–∏.
    "–∞–±–≤–≤–±–∞",  # –ü–∞–ª—ñ–Ω–¥—Ä–æ–º –∑ –ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤.
    "–∞–±–≤–≥–∞",  # –ù–µ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
]

for test in test_strings:
    print(f"–ß–∏ –ø–æ–ª—ñ–Ω–¥—Ä–æ–º '{test}'? {is_palindrome(test)}")
